-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Parsing.ParLatte
  ( happyError
  , myLexer
  , pProgram
  ) where
import qualified Parsing.AbsLatte
import Parsing.LexLatte
}

%name pProgram Program
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '++' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  ';' { PT _ (TS _ 14) }
  '<' { PT _ (TS _ 15) }
  '<=' { PT _ (TS _ 16) }
  '=' { PT _ (TS _ 17) }
  '==' { PT _ (TS _ 18) }
  '>' { PT _ (TS _ 19) }
  '>=' { PT _ (TS _ 20) }
  'boolean' { PT _ (TS _ 21) }
  'else' { PT _ (TS _ 22) }
  'false' { PT _ (TS _ 23) }
  'if' { PT _ (TS _ 24) }
  'int' { PT _ (TS _ 25) }
  'ref' { PT _ (TS _ 26) }
  'return' { PT _ (TS _ 27) }
  'string' { PT _ (TS _ 28) }
  'true' { PT _ (TS _ 29) }
  'void' { PT _ (TS _ 30) }
  'while' { PT _ (TS _ 31) }
  '{' { PT _ (TS _ 32) }
  '||' { PT _ (TS _ 33) }
  '}' { PT _ (TS _ 34) }
  L_Ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident :: { Parsing.AbsLatte.Ident}
Ident  : L_Ident { Parsing.AbsLatte.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ($1)) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { (Parsing.AbsLatte.Program ()) }
Program : ListTopDef { Parsing.AbsLatte.Program () $1 }

TopDef :: { (Parsing.AbsLatte.TopDef ()) }
TopDef : Type Ident '(' ListArg ')' Block { Parsing.AbsLatte.FnDef () $1 $2 $4 $6 }

ListTopDef :: { [Parsing.AbsLatte.TopDef ()] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }

Arg :: { (Parsing.AbsLatte.Arg ()) }
Arg : Type Ident { Parsing.AbsLatte.VArg () $1 $2 }
    | Type 'ref' Ident { Parsing.AbsLatte.RArg () $1 $3 }

ListArg :: { [Parsing.AbsLatte.Arg ()] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }

Block :: { (Parsing.AbsLatte.Block ()) }
Block : '{' ListStmt '}' { Parsing.AbsLatte.Block () $2 }

ListStmt :: { [Parsing.AbsLatte.Stmt ()] }
ListStmt : {- empty -} { [] } | Stmt ListStmt { (:) $1 $2 }

Stmt :: { (Parsing.AbsLatte.Stmt ()) }
Stmt : ';' { Parsing.AbsLatte.Empty () }
     | Block { Parsing.AbsLatte.BStmt () $1 }
     | Type ListItem ';' { Parsing.AbsLatte.Decl () $1 $2 }
     | Ident '=' Expr ';' { Parsing.AbsLatte.Ass () $1 $3 }
     | Ident '++' ';' { Parsing.AbsLatte.Incr () $1 }
     | Ident '--' ';' { Parsing.AbsLatte.Decr () $1 }
     | 'return' Expr ';' { Parsing.AbsLatte.Ret () $2 }
     | 'return' ';' { Parsing.AbsLatte.VRet () }
     | 'if' '(' Expr ')' Stmt { Parsing.AbsLatte.Cond () $3 $5 }
     | 'if' '(' Expr ')' Stmt 'else' Stmt { Parsing.AbsLatte.CondElse () $3 $5 $7 }
     | 'while' '(' Expr ')' Stmt { Parsing.AbsLatte.While () $3 $5 }
     | Expr ';' { Parsing.AbsLatte.SExp () $1 }

Item :: { (Parsing.AbsLatte.Item ()) }
Item : Ident { Parsing.AbsLatte.NoInit () $1 }
     | Ident '=' Expr { Parsing.AbsLatte.Init () $1 $3 }

ListItem :: { [Parsing.AbsLatte.Item ()] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }

Type :: { (Parsing.AbsLatte.Type ()) }
Type : 'int' { Parsing.AbsLatte.Int () }
     | 'string' { Parsing.AbsLatte.Str () }
     | 'boolean' { Parsing.AbsLatte.Bool () }
     | 'void' { Parsing.AbsLatte.Void () }

ListType :: { [Parsing.AbsLatte.Type ()] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }

Expr6 :: { Parsing.AbsLatte.Expr () }
Expr6 : Ident { Parsing.AbsLatte.EVar () $1 }
      | Integer { Parsing.AbsLatte.ELitInt () $1 }
      | 'true' { Parsing.AbsLatte.ELitTrue () }
      | 'false' { Parsing.AbsLatte.ELitFalse () }
      | Ident '(' ListExpr ')' { Parsing.AbsLatte.EApp () $1 $3 }
      | String { Parsing.AbsLatte.EString () $1 }
      | '(' Expr ')' { $2 }

Expr5 :: { Parsing.AbsLatte.Expr () }
Expr5 : '-' Expr6 { Parsing.AbsLatte.Neg () $2 }
      | '!' Expr6 { Parsing.AbsLatte.Not () $2 }
      | Expr6 { $1 }

Expr4 :: { Parsing.AbsLatte.Expr () }
Expr4 : Expr4 MulOp Expr5 { Parsing.AbsLatte.EMul () $1 $2 $3 }
      | Expr5 { $1 }

Expr3 :: { Parsing.AbsLatte.Expr () }
Expr3 : Expr3 AddOp Expr4 { Parsing.AbsLatte.EAdd () $1 $2 $3 }
      | Expr4 { $1 }

Expr2 :: { Parsing.AbsLatte.Expr () }
Expr2 : Expr2 RelOp Expr3 { Parsing.AbsLatte.ERel () $1 $2 $3 }
      | Expr3 { $1 }

Expr1 :: { Parsing.AbsLatte.Expr () }
Expr1 : Expr2 '&&' Expr1 { Parsing.AbsLatte.EAnd () $1 $3 }
      | Expr2 { $1 }

Expr :: { (Parsing.AbsLatte.Expr ()) }
Expr : Expr1 '||' Expr { Parsing.AbsLatte.EOr () $1 $3 }
     | Expr1 { $1 }

ListExpr :: { [Parsing.AbsLatte.Expr ()] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { (Parsing.AbsLatte.AddOp ()) }
AddOp : '+' { Parsing.AbsLatte.Plus () }
      | '-' { Parsing.AbsLatte.Minus () }

MulOp :: { (Parsing.AbsLatte.MulOp ()) }
MulOp : '*' { Parsing.AbsLatte.Times () }
      | '/' { Parsing.AbsLatte.Div () }
      | '%' { Parsing.AbsLatte.Mod () }

RelOp :: { (Parsing.AbsLatte.RelOp ()) }
RelOp : '<' { Parsing.AbsLatte.LTH () }
      | '<=' { Parsing.AbsLatte.LE () }
      | '>' { Parsing.AbsLatte.GTH () }
      | '>=' { Parsing.AbsLatte.GE () }
      | '==' { Parsing.AbsLatte.EQU () }
      | '!=' { Parsing.AbsLatte.NE () }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

